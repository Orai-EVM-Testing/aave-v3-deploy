{
  "address": "0xb9Fdea1ec927cB488a1aED48291361eA0344A2A2",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "allowFailure",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Call3[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate3",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "allowFailure",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Call3Value[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate3Value",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "blockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall3.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2a6d0750072a0a180f49f821a0d248c931889f7b268071369ec1ab8ff821316f",
  "receipt": {
    "to": null,
    "from": "0x034a475e1b1F0a5ffD9b35D7cA09cE0f403784D4",
    "contractAddress": "0xb9Fdea1ec927cB488a1aED48291361eA0344A2A2",
    "transactionIndex": 0,
    "gasUsed": "866200",
    "logsBloom": "0x
    "blockHash": "0x5a2b2e293fde3040731d10719925688a2e11d7fb08b12b418a9feb1855ed5d8f",
    "transactionHash": "0x2a6d0750072a0a180f49f821a0d248c931889f7b268071369ec1ab8ff821316f",
    "logs": [],
    "blockNumber": 56431780,
    "cumulativeGasUsed": "1940173",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a9df3cf848602941b6d7d39bcc396a4f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call3[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate3\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call3Value[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate3Value\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>Andreas Bigger <andreas@nascent.xyz>Matt Solomon <matt@mattsolomon.dev>\",\"details\":\"Multicall & Multicall2 backwards-compatibleAggregate methods are marked `payable` to save 24 gas per call\",\"kind\":\"dev\",\"methods\":{\"aggregate((address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of bytes containing the responses\"}},\"aggregate3((address,bool,bytes)[])\":{\"params\":{\"calls\":\"An array of Call3 structs\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"aggregate3Value((address,bool,uint256,bytes)[])\":{\"params\":{\"calls\":\"An array of Call3Value structs\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"blockAndAggregate((address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockHash\":\"The hash of the block where the calls were executed\",\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of Result structs\"}},\"getBlockHash(uint256)\":{\"params\":{\"blockNumber\":\"The block number\"}},\"tryAggregate(bool,(address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\",\"requireSuccess\":\"If true, require all calls to succeed\"},\"returns\":{\"returnData\":\"An array of Result structs\"}},\"tryBlockAndAggregate(bool,(address,bytes)[])\":{\"params\":{\"calls\":\"An array of Call structs\"},\"returns\":{\"blockHash\":\"The hash of the block where the calls were executed\",\"blockNumber\":\"The block number where the calls were executed\",\"returnData\":\"An array of Result structs\"}}},\"title\":\"Multicall3\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregate((address,bytes)[])\":{\"notice\":\"Backwards-compatible call aggregation with Multicall\"},\"aggregate3((address,bool,bytes)[])\":{\"notice\":\"Aggregate calls, ensuring each returns success if required\"},\"aggregate3Value((address,bool,uint256,bytes)[])\":{\"notice\":\"Aggregate calls with a msg valueReverts if msg.value is less than the sum of the call values\"},\"blockAndAggregate((address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate\"},\"getBlockHash(uint256)\":{\"notice\":\"Returns the block hash for the given block number\"},\"getBlockNumber()\":{\"notice\":\"Returns the block number\"},\"getChainId()\":{\"notice\":\"Returns the chain id\"},\"getCurrentBlockCoinbase()\":{\"notice\":\"Returns the block coinbase\"},\"getCurrentBlockDifficulty()\":{\"notice\":\"Returns the block difficulty\"},\"getCurrentBlockGasLimit()\":{\"notice\":\"Returns the block gas limit\"},\"getCurrentBlockTimestamp()\":{\"notice\":\"Returns the block timestamp\"},\"getEthBalance(address)\":{\"notice\":\"Returns the (ETH) balance of a given address\"},\"getLastBlockHash()\":{\"notice\":\"Returns the block hash of the last block\"},\"tryAggregate(bool,(address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls without requiring success\"},\"tryBlockAndAggregate(bool,(address,bytes)[])\":{\"notice\":\"Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate\"}},\"notice\":\"Aggregate results from multiple function calls\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Multicall3.sol\":\"Multicall3\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Multicall3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Multicall3\\r\\n/// @notice Aggregate results from multiple function calls\\r\\n/// @dev Multicall & Multicall2 backwards-compatible\\r\\n/// @dev Aggregate methods are marked `payable` to save 24 gas per call\\r\\n/// @author Michael Elliot <mike@makerdao.com>\\r\\n/// @author Joshua Levine <joshua@makerdao.com>\\r\\n/// @author Nick Johnson <arachnid@notdot.net>\\r\\n/// @author Andreas Bigger <andreas@nascent.xyz>\\r\\n/// @author Matt Solomon <matt@mattsolomon.dev>\\r\\ncontract Multicall3 {\\r\\n    struct Call {\\r\\n        address target;\\r\\n        bytes callData;\\r\\n    }\\r\\n\\r\\n    struct Call3 {\\r\\n        address target;\\r\\n        bool allowFailure;\\r\\n        bytes callData;\\r\\n    }\\r\\n\\r\\n    struct Call3Value {\\r\\n        address target;\\r\\n        bool allowFailure;\\r\\n        uint256 value;\\r\\n        bytes callData;\\r\\n    }\\r\\n\\r\\n    struct Result {\\r\\n        bool success;\\r\\n        bytes returnData;\\r\\n    }\\r\\n\\r\\n    /// @notice Backwards-compatible call aggregation with Multicall\\r\\n    /// @param calls An array of Call structs\\r\\n    /// @return blockNumber The block number where the calls were executed\\r\\n    /// @return returnData An array of bytes containing the responses\\r\\n    function aggregate(Call[] calldata calls) public payable returns (uint256 blockNumber, bytes[] memory returnData) {\\r\\n        blockNumber = block.number;\\r\\n        uint256 length = calls.length;\\r\\n        returnData = new bytes[](length);\\r\\n        Call calldata call;\\r\\n        for (uint256 i = 0; i < length;) {\\r\\n            bool success;\\r\\n            call = calls[i];\\r\\n            (success, returnData[i]) = call.target.call(call.callData);\\r\\n            require(success, \\\"Multicall3: call failed\\\");\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Backwards-compatible with Multicall2\\r\\n    /// @notice Aggregate calls without requiring success\\r\\n    /// @param requireSuccess If true, require all calls to succeed\\r\\n    /// @param calls An array of Call structs\\r\\n    /// @return returnData An array of Result structs\\r\\n    function tryAggregate(bool requireSuccess, Call[] calldata calls) public payable returns (Result[] memory returnData) {\\r\\n        uint256 length = calls.length;\\r\\n        returnData = new Result[](length);\\r\\n        Call calldata call;\\r\\n        for (uint256 i = 0; i < length;) {\\r\\n            Result memory result = returnData[i];\\r\\n            call = calls[i];\\r\\n            (result.success, result.returnData) = call.target.call(call.callData);\\r\\n            if (requireSuccess) require(result.success, \\\"Multicall3: call failed\\\");\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Backwards-compatible with Multicall2\\r\\n    /// @notice Aggregate calls and allow failures using tryAggregate\\r\\n    /// @param calls An array of Call structs\\r\\n    /// @return blockNumber The block number where the calls were executed\\r\\n    /// @return blockHash The hash of the block where the calls were executed\\r\\n    /// @return returnData An array of Result structs\\r\\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls) public payable returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\r\\n        blockNumber = block.number;\\r\\n        blockHash = blockhash(block.number);\\r\\n        returnData = tryAggregate(requireSuccess, calls);\\r\\n    }\\r\\n\\r\\n    /// @notice Backwards-compatible with Multicall2\\r\\n    /// @notice Aggregate calls and allow failures using tryAggregate\\r\\n    /// @param calls An array of Call structs\\r\\n    /// @return blockNumber The block number where the calls were executed\\r\\n    /// @return blockHash The hash of the block where the calls were executed\\r\\n    /// @return returnData An array of Result structs\\r\\n    function blockAndAggregate(Call[] calldata calls) public payable returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\r\\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\\r\\n    }\\r\\n\\r\\n    /// @notice Aggregate calls, ensuring each returns success if required\\r\\n    /// @param calls An array of Call3 structs\\r\\n    /// @return returnData An array of Result structs\\r\\n    function aggregate3(Call3[] calldata calls) public payable returns (Result[] memory returnData) {\\r\\n        uint256 length = calls.length;\\r\\n        returnData = new Result[](length);\\r\\n        Call3 calldata calli;\\r\\n        for (uint256 i = 0; i < length;) {\\r\\n            Result memory result = returnData[i];\\r\\n            calli = calls[i];\\r\\n            (result.success, result.returnData) = calli.target.call(calli.callData);\\r\\n            assembly {\\r\\n                // Revert if the call fails and failure is not allowed\\r\\n                // `allowFailure := calldataload(add(calli, 0x20))` and `success := mload(result)`\\r\\n                if iszero(or(calldataload(add(calli, 0x20)), mload(result))) {\\r\\n                    // set \\\"Error(string)\\\" signature: bytes32(bytes4(keccak256(\\\"Error(string)\\\")))\\r\\n                    mstore(0x00, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\r\\n                    // set data offset\\r\\n                    mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\r\\n                    // set length of revert string\\r\\n                    mstore(0x24, 0x0000000000000000000000000000000000000000000000000000000000000017)\\r\\n                    // set revert string: bytes32(abi.encodePacked(\\\"Multicall3: call failed\\\"))\\r\\n                    mstore(0x44, 0x4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000)\\r\\n                    revert(0x00, 0x64)\\r\\n                }\\r\\n            }\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Aggregate calls with a msg value\\r\\n    /// @notice Reverts if msg.value is less than the sum of the call values\\r\\n    /// @param calls An array of Call3Value structs\\r\\n    /// @return returnData An array of Result structs\\r\\n    function aggregate3Value(Call3Value[] calldata calls) public payable returns (Result[] memory returnData) {\\r\\n        uint256 valAccumulator;\\r\\n        uint256 length = calls.length;\\r\\n        returnData = new Result[](length);\\r\\n        Call3Value calldata calli;\\r\\n        for (uint256 i = 0; i < length;) {\\r\\n            Result memory result = returnData[i];\\r\\n            calli = calls[i];\\r\\n            uint256 val = calli.value;\\r\\n            // Humanity will be a Type V Kardashev Civilization before this overflows - andreas\\r\\n            // ~ 10^25 Wei in existence << ~ 10^76 size uint fits in a uint256\\r\\n            unchecked { valAccumulator += val; }\\r\\n            (result.success, result.returnData) = calli.target.call{value: val}(calli.callData);\\r\\n            assembly {\\r\\n                // Revert if the call fails and failure is not allowed\\r\\n                // `allowFailure := calldataload(add(calli, 0x20))` and `success := mload(result)`\\r\\n                if iszero(or(calldataload(add(calli, 0x20)), mload(result))) {\\r\\n                    // set \\\"Error(string)\\\" signature: bytes32(bytes4(keccak256(\\\"Error(string)\\\")))\\r\\n                    mstore(0x00, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\r\\n                    // set data offset\\r\\n                    mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\r\\n                    // set length of revert string\\r\\n                    mstore(0x24, 0x0000000000000000000000000000000000000000000000000000000000000017)\\r\\n                    // set revert string: bytes32(abi.encodePacked(\\\"Multicall3: call failed\\\"))\\r\\n                    mstore(0x44, 0x4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000)\\r\\n                    revert(0x00, 0x84)\\r\\n                }\\r\\n            }\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n        // Finally, make sure the msg.value = SUM(call[0...i].value)\\r\\n        require(msg.value == valAccumulator, \\\"Multicall3: value mismatch\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the block hash for the given block number\\r\\n    /// @param blockNumber The block number\\r\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\r\\n        blockHash = blockhash(blockNumber);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the block number\\r\\n    function getBlockNumber() public view returns (uint256 blockNumber) {\\r\\n        blockNumber = block.number;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the block coinbase\\r\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\r\\n        coinbase = block.coinbase;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the block difficulty\\r\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\r\\n        difficulty = block.difficulty;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the block gas limit\\r\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\r\\n        gaslimit = block.gaslimit;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the block timestamp\\r\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\r\\n        timestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the (ETH) balance of a given address\\r\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\r\\n        balance = addr.balance;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the block hash of the last block\\r\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\r\\n        unchecked {\\r\\n            blockHash = blockhash(block.number - 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the base fee of the given block\\r\\n    /// @notice Can revert if the BASEFEE opcode is not implemented by the given chain\\r\\n    // function getBasefee() public view returns (uint256 basefee) {\\r\\n    //     basefee = block.basefee;\\r\\n    // }\\r\\n\\r\\n    /// @notice Returns the chain id\\r\\n    function getChainId() public view returns (uint256 chainid) {\\r\\n        chainid = block.chainid;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x260c07728938d032c0d2dd17529abe25a2ea90d6c01fed1efc4c9e50169f551f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ec2806100206000396000f3fe6080604052600436106100e85760003560e01c80634d2301cc1161008a578063a8b0574e11610059578063a8b0574e1461023c578063bce38bd714610257578063c3077fa91461026a578063ee82ac5e1461027d57600080fd5b80634d2301cc146101ce57806372425d9d1461020357806382ad56cb1461021657806386d516e81461022957600080fd5b806327e86d6e116100c657806327e86d6e146101505780633408e47014610186578063399542e91461019957806342cbb15c146101bb57600080fd5b80630f28c97d146100ed578063174dea711461010f578063252dba421461012f575b600080fd5b3480156100f957600080fd5b50425b6040519081526020015b60405180910390f35b61012261011d366004610a67565b61029c565b6040516101069190610ba0565b61014261013d366004610a67565b6104d1565b604051610106929190610bba565b34801561015c57600080fd5b50437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01406100fc565b34801561019257600080fd5b50466100fc565b6101ac6101a7366004610c42565b610672565b60405161010693929190610c9c565b3480156101c757600080fd5b50436100fc565b3480156101da57600080fd5b506100fc6101e9366004610cc4565b73ffffffffffffffffffffffffffffffffffffffff163190565b34801561020f57600080fd5b50446100fc565b610122610224366004610a67565b61068d565b34801561023557600080fd5b50456100fc565b34801561024857600080fd5b50604051418152602001610106565b610122610265366004610c42565b61083c565b6101ac610278366004610a67565b6109fc565b34801561028957600080fd5b506100fc610298366004610cfa565b4090565b60606000828067ffffffffffffffff8111156102ba576102ba610d13565b60405190808252806020026020018201604052801561030057816020015b6040805180820190915260008152606060208201528152602001906001900390816102d85790505b5092503660005b8281101561045957600085828151811061032357610323610d42565b6020026020010151905087878381811061033f5761033f610d42565b90506020028101906103519190610d71565b60408101359586019590935061036a6020850185610cc4565b73ffffffffffffffffffffffffffffffffffffffff168161038e6060870187610daf565b60405161039c929190610e14565b60006040518083038185875af1925050503d80600081146103d9576040519150601f19603f3d011682016040523d82523d6000602084013e6103de565b606091505b50602080850191909152901515808452908501351761044f577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b5050600101610307565b508234146104c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d756c746963616c6c333a2076616c7565206d69736d6174636800000000000060448201526064015b60405180910390fd5b50505092915050565b436060828067ffffffffffffffff8111156104ee576104ee610d13565b60405190808252806020026020018201604052801561052157816020015b606081526020019060019003908161050c5790505b5091503660005b8281101561066857600087878381811061054457610544610d42565b90506020028101906105569190610e24565b92506105656020840184610cc4565b73ffffffffffffffffffffffffffffffffffffffff166105886020850185610daf565b604051610596929190610e14565b6000604051808303816000865af19150503d80600081146105d3576040519150601f19603f3d011682016040523d82523d6000602084013e6105d8565b606091505b508684815181106105eb576105eb610d42565b602090810291909101015290508061065f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060448201526064016104bf565b50600101610528565b5050509250929050565b438040606061068286868661083c565b905093509350939050565b6060818067ffffffffffffffff8111156106a9576106a9610d13565b6040519080825280602002602001820160405280156106ef57816020015b6040805180820190915260008152606060208201528152602001906001900390816106c75790505b5091503660005b828110156104c857600084828151811061071257610712610d42565b6020026020010151905086868381811061072e5761072e610d42565b90506020028101906107409190610e58565b925061074f6020840184610cc4565b73ffffffffffffffffffffffffffffffffffffffff166107726040850185610daf565b604051610780929190610e14565b6000604051808303816000865af19150503d80600081146107bd576040519150601f19603f3d011682016040523d82523d6000602084013e6107c2565b606091505b506020808401919091529015158083529084013517610833577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b506001016106f6565b6060818067ffffffffffffffff81111561085857610858610d13565b60405190808252806020026020018201604052801561089e57816020015b6040805180820190915260008152606060208201528152602001906001900390816108765790505b5091503660005b828110156109f25760008482815181106108c1576108c1610d42565b602002602001015190508686838181106108dd576108dd610d42565b90506020028101906108ef9190610e24565b92506108fe6020840184610cc4565b73ffffffffffffffffffffffffffffffffffffffff166109216020850185610daf565b60405161092f929190610e14565b6000604051808303816000865af19150503d806000811461096c576040519150601f19603f3d011682016040523d82523d6000602084013e610971565b606091505b5060208301521515815287156109e95780516109e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060448201526064016104bf565b506001016108a5565b5050509392505050565b6000806060610a0d60018686610672565b919790965090945092505050565b60008083601f840112610a2d57600080fd5b50813567ffffffffffffffff811115610a4557600080fd5b6020830191508360208260051b8501011115610a6057600080fd5b9250929050565b60008060208385031215610a7a57600080fd5b823567ffffffffffffffff811115610a9157600080fd5b610a9d85828601610a1b565b90969095509350505050565b6000815180845260005b81811015610acf57602081850181015186830182015201610ab3565b81811115610ae1576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015610b93578583037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001895281518051151584528401516040858501819052610b7f81860183610aa9565b9a86019a9450505090830190600101610b31565b5090979650505050505050565b602081526000610bb36020830184610b14565b9392505050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610c34577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452610c22868351610aa9565b95509284019290840190600101610be8565b509398975050505050505050565b600080600060408486031215610c5757600080fd5b83358015158114610c6757600080fd5b9250602084013567ffffffffffffffff811115610c8357600080fd5b610c8f86828701610a1b565b9497909650939450505050565b838152826020820152606060408201526000610cbb6060830184610b14565b95945050505050565b600060208284031215610cd657600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610bb357600080fd5b600060208284031215610d0c57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112610da557600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610de457600080fd5b83018035915067ffffffffffffffff821115610dff57600080fd5b602001915036819003821315610a6057600080fd5b8183823760009101908152919050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112610da557600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112610da557600080fdfea26469706673582212205a0cfb6235472b5a268836d82835b55756dc76b021592c71255bf8812a5a339664736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80634d2301cc1161008a578063a8b0574e11610059578063a8b0574e1461023c578063bce38bd714610257578063c3077fa91461026a578063ee82ac5e1461027d57600080fd5b80634d2301cc146101ce57806372425d9d1461020357806382ad56cb1461021657806386d516e81461022957600080fd5b806327e86d6e116100c657806327e86d6e146101505780633408e47014610186578063399542e91461019957806342cbb15c146101bb57600080fd5b80630f28c97d146100ed578063174dea711461010f578063252dba421461012f575b600080fd5b3480156100f957600080fd5b50425b6040519081526020015b60405180910390f35b61012261011d366004610a67565b61029c565b6040516101069190610ba0565b61014261013d366004610a67565b6104d1565b604051610106929190610bba565b34801561015c57600080fd5b50437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01406100fc565b34801561019257600080fd5b50466100fc565b6101ac6101a7366004610c42565b610672565b60405161010693929190610c9c565b3480156101c757600080fd5b50436100fc565b3480156101da57600080fd5b506100fc6101e9366004610cc4565b73ffffffffffffffffffffffffffffffffffffffff163190565b34801561020f57600080fd5b50446100fc565b610122610224366004610a67565b61068d565b34801561023557600080fd5b50456100fc565b34801561024857600080fd5b50604051418152602001610106565b610122610265366004610c42565b61083c565b6101ac610278366004610a67565b6109fc565b34801561028957600080fd5b506100fc610298366004610cfa565b4090565b60606000828067ffffffffffffffff8111156102ba576102ba610d13565b60405190808252806020026020018201604052801561030057816020015b6040805180820190915260008152606060208201528152602001906001900390816102d85790505b5092503660005b8281101561045957600085828151811061032357610323610d42565b6020026020010151905087878381811061033f5761033f610d42565b90506020028101906103519190610d71565b60408101359586019590935061036a6020850185610cc4565b73ffffffffffffffffffffffffffffffffffffffff168161038e6060870187610daf565b60405161039c929190610e14565b60006040518083038185875af1925050503d80600081146103d9576040519150601f19603f3d011682016040523d82523d6000602084013e6103de565b606091505b50602080850191909152901515808452908501351761044f577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b5050600101610307565b508234146104c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d756c746963616c6c333a2076616c7565206d69736d6174636800000000000060448201526064015b60405180910390fd5b50505092915050565b436060828067ffffffffffffffff8111156104ee576104ee610d13565b60405190808252806020026020018201604052801561052157816020015b606081526020019060019003908161050c5790505b5091503660005b8281101561066857600087878381811061054457610544610d42565b90506020028101906105569190610e24565b92506105656020840184610cc4565b73ffffffffffffffffffffffffffffffffffffffff166105886020850185610daf565b604051610596929190610e14565b6000604051808303816000865af19150503d80600081146105d3576040519150601f19603f3d011682016040523d82523d6000602084013e6105d8565b606091505b508684815181106105eb576105eb610d42565b602090810291909101015290508061065f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060448201526064016104bf565b50600101610528565b5050509250929050565b438040606061068286868661083c565b905093509350939050565b6060818067ffffffffffffffff8111156106a9576106a9610d13565b6040519080825280602002602001820160405280156106ef57816020015b6040805180820190915260008152606060208201528152602001906001900390816106c75790505b5091503660005b828110156104c857600084828151811061071257610712610d42565b6020026020010151905086868381811061072e5761072e610d42565b90506020028101906107409190610e58565b925061074f6020840184610cc4565b73ffffffffffffffffffffffffffffffffffffffff166107726040850185610daf565b604051610780929190610e14565b6000604051808303816000865af19150503d80600081146107bd576040519150601f19603f3d011682016040523d82523d6000602084013e6107c2565b606091505b506020808401919091529015158083529084013517610833577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b506001016106f6565b6060818067ffffffffffffffff81111561085857610858610d13565b60405190808252806020026020018201604052801561089e57816020015b6040805180820190915260008152606060208201528152602001906001900390816108765790505b5091503660005b828110156109f25760008482815181106108c1576108c1610d42565b602002602001015190508686838181106108dd576108dd610d42565b90506020028101906108ef9190610e24565b92506108fe6020840184610cc4565b73ffffffffffffffffffffffffffffffffffffffff166109216020850185610daf565b60405161092f929190610e14565b6000604051808303816000865af19150503d806000811461096c576040519150601f19603f3d011682016040523d82523d6000602084013e610971565b606091505b5060208301521515815287156109e95780516109e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060448201526064016104bf565b506001016108a5565b5050509392505050565b6000806060610a0d60018686610672565b919790965090945092505050565b60008083601f840112610a2d57600080fd5b50813567ffffffffffffffff811115610a4557600080fd5b6020830191508360208260051b8501011115610a6057600080fd5b9250929050565b60008060208385031215610a7a57600080fd5b823567ffffffffffffffff811115610a9157600080fd5b610a9d85828601610a1b565b90969095509350505050565b6000815180845260005b81811015610acf57602081850181015186830182015201610ab3565b81811115610ae1576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015610b93578583037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001895281518051151584528401516040858501819052610b7f81860183610aa9565b9a86019a9450505090830190600101610b31565b5090979650505050505050565b602081526000610bb36020830184610b14565b9392505050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610c34577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452610c22868351610aa9565b95509284019290840190600101610be8565b509398975050505050505050565b600080600060408486031215610c5757600080fd5b83358015158114610c6757600080fd5b9250602084013567ffffffffffffffff811115610c8357600080fd5b610c8f86828701610a1b565b9497909650939450505050565b838152826020820152606060408201526000610cbb6060830184610b14565b95945050505050565b600060208284031215610cd657600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610bb357600080fd5b600060208284031215610d0c57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112610da557600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610de457600080fd5b83018035915067ffffffffffffffff821115610dff57600080fd5b602001915036819003821315610a6057600080fd5b8183823760009101908152919050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112610da557600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112610da557600080fdfea26469706673582212205a0cfb6235472b5a268836d82835b55756dc76b021592c71255bf8812a5a339664736f6c634300080a0033",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>Andreas Bigger <andreas@nascent.xyz>Matt Solomon <matt@mattsolomon.dev>",
    "details": "Multicall & Multicall2 backwards-compatibleAggregate methods are marked `payable` to save 24 gas per call",
    "kind": "dev",
    "methods": {
      "aggregate((address,bytes)[])": {
        "params": {
          "calls": "An array of Call structs"
        },
        "returns": {
          "blockNumber": "The block number where the calls were executed",
          "returnData": "An array of bytes containing the responses"
        }
      },
      "aggregate3((address,bool,bytes)[])": {
        "params": {
          "calls": "An array of Call3 structs"
        },
        "returns": {
          "returnData": "An array of Result structs"
        }
      },
      "aggregate3Value((address,bool,uint256,bytes)[])": {
        "params": {
          "calls": "An array of Call3Value structs"
        },
        "returns": {
          "returnData": "An array of Result structs"
        }
      },
      "blockAndAggregate((address,bytes)[])": {
        "params": {
          "calls": "An array of Call structs"
        },
        "returns": {
          "blockHash": "The hash of the block where the calls were executed",
          "blockNumber": "The block number where the calls were executed",
          "returnData": "An array of Result structs"
        }
      },
      "getBlockHash(uint256)": {
        "params": {
          "blockNumber": "The block number"
        }
      },
      "tryAggregate(bool,(address,bytes)[])": {
        "params": {
          "calls": "An array of Call structs",
          "requireSuccess": "If true, require all calls to succeed"
        },
        "returns": {
          "returnData": "An array of Result structs"
        }
      },
      "tryBlockAndAggregate(bool,(address,bytes)[])": {
        "params": {
          "calls": "An array of Call structs"
        },
        "returns": {
          "blockHash": "The hash of the block where the calls were executed",
          "blockNumber": "The block number where the calls were executed",
          "returnData": "An array of Result structs"
        }
      }
    },
    "title": "Multicall3",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "aggregate((address,bytes)[])": {
        "notice": "Backwards-compatible call aggregation with Multicall"
      },
      "aggregate3((address,bool,bytes)[])": {
        "notice": "Aggregate calls, ensuring each returns success if required"
      },
      "aggregate3Value((address,bool,uint256,bytes)[])": {
        "notice": "Aggregate calls with a msg valueReverts if msg.value is less than the sum of the call values"
      },
      "blockAndAggregate((address,bytes)[])": {
        "notice": "Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate"
      },
      "getBlockHash(uint256)": {
        "notice": "Returns the block hash for the given block number"
      },
      "getBlockNumber()": {
        "notice": "Returns the block number"
      },
      "getChainId()": {
        "notice": "Returns the chain id"
      },
      "getCurrentBlockCoinbase()": {
        "notice": "Returns the block coinbase"
      },
      "getCurrentBlockDifficulty()": {
        "notice": "Returns the block difficulty"
      },
      "getCurrentBlockGasLimit()": {
        "notice": "Returns the block gas limit"
      },
      "getCurrentBlockTimestamp()": {
        "notice": "Returns the block timestamp"
      },
      "getEthBalance(address)": {
        "notice": "Returns the (ETH) balance of a given address"
      },
      "getLastBlockHash()": {
        "notice": "Returns the block hash of the last block"
      },
      "tryAggregate(bool,(address,bytes)[])": {
        "notice": "Backwards-compatible with Multicall2Aggregate calls without requiring success"
      },
      "tryBlockAndAggregate(bool,(address,bytes)[])": {
        "notice": "Backwards-compatible with Multicall2Aggregate calls and allow failures using tryAggregate"
      }
    },
    "notice": "Aggregate results from multiple function calls",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}